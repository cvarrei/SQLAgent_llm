import streamlit as st
import pandas as pd
import plotly.express as px
import sqlite3
import json

from SQLAgent import SQLQueryAgent

from langchain.llms import HuggingFaceHub
from langchain.sql_database import SQLDatabase

import warnings
warnings.filterwarnings('ignore')


# Cl√© √† entrer dans le menu lat√©ral pour se connecter √† l'API de HuggingFace :    
hf_api_key = st.sidebar.text_input('Cl√© API HuggingFace', type='password') 
    
    # On indique le mod√®le de LLM
repo_id = "mistralai/Mixtral-8x7B-Instruct-v0.1"

st.title('Q/ABot üó£Ô∏è')
st.toast('Here you can chat with Oliver')
st.markdown("Bienvenue dans la partie 2.0 de notre application ! A votre tour d'√™tre cr√©atif et de poser les questions qui vous tarodent! ")
st.markdown("Vous √™tes mis en contact avec notre LLM fran√ßais: Mixtral-8x7B !")

# On affiche le Q/Abot qu'√† la pr√©sence de la cl√© d'acc√®s respectant le format requis
if hf_api_key.startswith('hf_') and len(hf_api_key) == 37:
        st.header("Notre module de Question/R√©ponse")
        # On cr√©e un formulaire d'envoie
        with st.form('my_form'):
            query = st.text_area('Quelle est votre question?', '')

            if not hf_api_key.startswith('hf_') and len(hf_api_key) != 37:
                st.warning('Entrez une ü§ó HuggingFace API key!', icon='‚ö†Ô∏è')
            else:
                st.success("Thanks for the key! ", icon='ü§ñ')
                llm = HuggingFaceHub(
                        repo_id=repo_id,
                        huggingfacehub_api_token=hf_api_key,
                        model_kwargs={"temperature": 0.2, "max_new_tokens": 400}
                    )
                
                MyAgent = SQLQueryAgent(llm=llm, db="sqlite:///database.db")

                # On cr√©e un bouton pour envoyer la question
                submitted = st.form_submit_button('Submit')
                # Si le bouton est cliqu√©,
                if submitted:
                    # Si la question n'est pas vide,
                    if len(query) == 0:
                        st.error("Attention votre requ√™te est vide !")
                    else:
                        try:
                            # On r√©cup√®re la r√©ponse √† la question
                            result = MyAgent.process_query(query, verbose=True)
                            print(f'Sortie: {result}')
                            # On affiche la r√©ponse
                            st.markdown(result)
                        except Exception as e:
                            # On renvoie un message d'erreur si le Q/Abot n'a pas pu r√©pondre (question trop complexe ou non pr√©sente dans la base de donn√©e)
                            st.error('Je n\'ai pas r√©ussi √† r√©pondre a votre question...', icon="üö®")
                            st.text("1) V√©rifiez que votre cl√© API est correcte; 2) Essayez de reformuler votre r√©ponse pour qu'elle soit plus claire")
                    

                st.markdown("Je ne suis qu'un ChatBot √©tudiant, je n'ai pas encore √©t√© dop√© ! Mes r√©ponses peuvent tarder jusqu'√† 20-30 secondes, soyez patient!\
                            Plus vous serez clair dans votre question, plus je serais rapide et plus je serais √©galement pr√©cis dans ma r√©ponse. N'h√©sitez pas √† reformuler vos questions ou les rendre plus d√©taill√©, surtout les plus complexes.")
                st.markdown("Attention, la base de donn√©e contient le d√©partement et la r√©gion de l'offre (pas la ville). Elle r√©pondra donc toujours sur le d√©partement ou la r√©gion de la ville si cette derni√®re est pr√©cis√©e.")
                st.markdown("**Exemple de questions:**")
                st.caption('Le salaire d\'un data analyst est il plus √©lev√© √† Paris ou Lyon?')
                st.caption('Quel est le nombre d\'offres de data scientist √† Lyon?')
            st.caption("Existe-t-il des offres de stage √† Lille?")
else: 
    st.error("Veuillez rentrer une cl√© d'acc√®s HuggingFace pour pouvoir faire appara√Ætre le Q/Abot.")    
